// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  bookings      Booking[]
  notifications Notification[]
}

model Building {
  id    String @id @default(cuid())
  name  String
  code  String @unique
  
  rooms Room[]
  
  @@map("buildings")
}

model Room {
  id          String   @id @default(cuid())
  name        String
  capacity    Int
  facilities  String?  @db.Text
  image       String?
  buildingId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  building    Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  
  @@map("rooms")
}

model Booking {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  startTime       DateTime
  endTime         DateTime
  status          BookingStatus @default(PENDING)
  proposalUrl     String?
  proposalName    String?
  isPublic        Boolean       @default(false)
  participantCount Int?
  coordinatorName String?
  phoneNumber     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  userId          String
  roomId          String
  
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room            Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@map("bookings")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum Role {
  STUDENT
  ADMIN
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
}